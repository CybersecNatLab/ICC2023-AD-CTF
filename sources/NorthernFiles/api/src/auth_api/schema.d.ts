/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/user": {
    /** Create User */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UserPostRequest"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": components["schemas"]["UserResponse"];
          };
        };
        /** @description Validation error */
        422: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
      };
    };
  };
  "/jwks": {
    /** Get Keys */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": components["schemas"]["KeysResponse"];
          };
        };
      };
    };
  };
  "/user/{username}": {
    /** Get User By Username */
    get: {
      parameters: {
        path: {
          username: string;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": components["schemas"]["UserResponse"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["HTTPError"];
          };
        };
      };
    };
  };
  "/user/{username}/session": {
    /** Login */
    post: {
      parameters: {
        path: {
          username: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": components["schemas"]["TokenResponse"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["HTTPError"];
          };
        };
        /** @description Validation error */
        422: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
      };
    };
  };
  "/user/{username}/challenge": {
    /** Get User Challenge */
    post: {
      parameters: {
        path: {
          username: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ChallengeRequest"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": components["schemas"]["ChallengeResponse"];
          };
        };
        /** @description Not found */
        404: {
          content: {
            "application/json": components["schemas"]["HTTPError"];
          };
        };
        /** @description Validation error */
        422: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ValidationError: {
      detail?: {
        "<location>"?: {
          "<field_name>"?: (string)[];
        };
      };
      message?: string;
    };
    HTTPError: {
      detail?: Record<string, never>;
      message?: string;
    };
    UserPostRequest: {
      username: string;
      name: string;
      capsule: string;
    };
    UserResponse: {
      id: string;
      username: string;
      capsule: string;
    };
    JWK: {
      e: string;
      kid: string;
      kty: string;
      n: string;
    };
    KeysResponse: {
      keys: (components["schemas"]["JWK"])[];
    };
    LoginRequest: {
      ss_id: string;
      A_u: string;
    };
    TokenResponse: {
      token: string;
      expiration: number;
    };
    ChallengeRequest: {
      user_id: string;
      X_u: string;
      alpha: string;
    };
    ChallengeResponse: {
      ss_id: string;
      beta: string;
      C: string;
      X_s: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
