worker_processes 1;
pid /var/run/nginx.pid;

worker_rlimit_nofile 8192;


events {
	worker_connections  1024;  ## Default: 1024
	accept_mutex off; # set to 'on' if nginx worker_processes > 1
}


http {
	include mime.types;
	# fallback in case we can't determine a type
	default_type application/octet-stream;
	access_log /var/log/nginx/access.log combined;
	sendfile on;

	upstream frontend {
		server frontend:3000 fail_timeout=0;
	}

	upstream auth_proxy {
		server auth_proxy:8081 fail_timeout=0;
	}

	upstream auth {
		server auth:5000 fail_timeout=0;
	}

	upstream api {
		server api:3000 fail_timeout=0;
	}

	map $http_x_request_signature $api_host_map {
		default "auth_proxy";
		"" "api";
	}

	server {
		listen 80;
		client_max_body_size 40M;

		absolute_redirect off;

		keepalive_timeout 5;

		server_tokens off;

		error_page 404 /custom_404;
		location = /custom_404 {
			default_type text/plain;
			return 404 '404 page not found'; 
		}

		error_page 500 /custom_500;
		location = /custom_500 {
			default_type text/plain;
			return 500 '500 internal server error'; 
		}

		error_page 502 /custom_502;
		location = /custom_502 {
			default_type text/plain;
			return 502 '502 bad gateway'; 
		}

		error_page 301 302 307 = @handle_redirect;
		location @handle_redirect {
			resolver 8.8.8.8;
			set $redirect_location '$upstream_http_location';
			if ($redirect_location ~ "^/") {
				add_header 'Set-Cookie' $upstream_http_set_cookie;
				return 302 $redirect_location;
			}
			proxy_pass $redirect_location;
		}

		location / {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Real-Ip $remote_addr;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header Host $http_host;
			proxy_pass_request_headers on;
			# we don't want nginx trying to do something clever with
			# redirects, we set the Host: header above already.
			proxy_redirect off;

			proxy_intercept_errors on;
			proxy_pass http://frontend/;
		}

		location /bucket/ {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Real-Ip $remote_addr;
			proxy_set_header X-Forwarded-Proto $scheme;
			# we don't want nginx trying to do something clever with
			# redirects, we set the Host: header above already.
			proxy_redirect off;

			proxy_set_header Host minio:9000;
			proxy_intercept_errors on;
			proxy_pass http://minio:9000;
		}

		location /api/ {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Real-Ip $remote_addr;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header Host $http_host;
			# we don't want nginx trying to do something clever with
			# redirects, we set the Host: header above already.
			proxy_redirect off;

			if ($http_x_request_signature = "") {
				rewrite ^/api/(.*)$ /$1 break;
			}

			proxy_intercept_errors on;
			proxy_pass http://$api_host_map;
		}

		location /api/auth/ {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Real-Ip $remote_addr;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header Host $http_host;
			# we don't want nginx trying to do something clever with
			# redirects, we set the Host: header above already.

			rewrite ^/api/auth/(.*)$ /$1 break;

			proxy_redirect off;
			proxy_intercept_errors on;
			proxy_pass http://auth;
		}

		location /api/auth/internal/ {
			internal;
			rewrite ^/api/auth/(.*)$ /$1 break;
			proxy_pass http://auth;
		}

	}

}